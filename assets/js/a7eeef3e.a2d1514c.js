"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[874],{3691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(5893),s=t(1151);const r={sidebar_position:4},a="Dynamic Call Agent",o={id:"examples/dynamic-call-agent",title:"Dynamic Call Agent",description:"Learn how to build an agent that dynamically calls primitive programs",source:"@site/docs/examples/dynamic-call-agent.md",sourceDirName:"examples",slug:"/examples/dynamic-call-agent",permalink:"/documentation/examples/dynamic-call-agent",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Turn-based Conversation",permalink:"/documentation/examples/turn-based-conversation"}},l={},c=[{value:"Managing a large or growing library of programs",id:"managing-a-large-or-growing-library-of-programs",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dynamic-call-agent",children:"Dynamic Call Agent"}),"\n",(0,i.jsx)(n.p,{children:"Learn how to build an agent that dynamically calls primitive programs"}),"\n",(0,i.jsx)(n.h3,{id:"managing-a-large-or-growing-library-of-programs",children:"Managing a large or growing library of programs"}),"\n",(0,i.jsx)(n.p,{children:"With HybridAGI, the ability to act is limited to what's defined in its prompt program. But to expand its cognitive capabilities, we need to explore self-programming. Before diving into that, let's talk about dynamic program call."}),"\n",(0,i.jsx)(n.p,{children:"When we're dealing with systems that learn or have lots of programs, managing each case in the main program becomes impractical. That's where dynamic program calls come in."}),"\n",(0,i.jsx)(n.p,{children:"Let's take a closer look at an example to understand how this works in practice."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="main.cypher"',children:'// @desc: This is the main program\nCREATE\n(start:Control {name:"Start"}),\n(end:Control {name:"End"}),\n(fulfill_objective:Program {\n    name:"Fulfill the Objective",\n    program:"fulfill_objective"}),\n(ask_next_objective:Action {\n    name:"Ask the next Objective", \n    tool:"AskUser",\n    disable_inference:"true",\n    prompt:"Do you want anything else?"}),\n(is_assistance_needed:Decision {\n    name:"Check if the User want something else",\n    question:"Does the User need anything else?"}),\n(update_objective:Action {\n    name:"Update the Objective with the new User request",\n    tool:"UpdateObjective",\n    prompt:"Please update the Objective, be specific"}),\n(start)-[:NEXT]->(fulfill_objective),\n(fulfill_objective)-[:NEXT]->(ask_next_objective),\n(ask_next_objective)-[:NEXT]->(is_assistance_needed),\n(update_objective)-[:NEXT]->(fulfill_objective),\n(is_assistance_needed)-[:YES]->(update_objective),\n(is_assistance_needed)-[:NO]->(end)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the provided ",(0,i.jsx)(n.code,{children:"main.cypher"})," program, we're implementing dynamic program calls to manage a variety of user objectives efficiently. Let's break down the components:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'(fulfill_objective:Program {name:"Fulfill the Objective", program:"fulfill_objective"})'}),': This line declares a Program Node named "fulfill_objective." This node is connected to a separate Cypher file named ',(0,i.jsx)(n.code,{children:"fulfill_objective.cypher"}),", which contains the logic for fulfilling the user's objectives."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'(ask_next_objective:Action {name:"Ask the next Objective", tool:"AskUser", disable_inference:"true", prompt:"Do you want anything else?"})'}),': Here, we have an Action Node named "ask_next_objective." This node utilizes the "AskUser" tool to prompt the user with the question "Do you want anything else?" The ',(0,i.jsx)(n.code,{children:'disable_inference:"true"'})," ensures the direct use of this question without LLM inference."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'(is_assistance_needed:Decision {name:"Check if the User wants something else", question:"Does the User need anything else?"})'}),': We\'ve introduced a Decision Node named "is_assistance_needed." This node checks whether the user needs any further assistance, posing the question "Does the User need anything else?"']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'(update_objective:Action {name:"Update the Objective with the new User request", tool:"UpdateObjective", prompt:"Please update the Objective, be specific"})'}),': Another Action Node named "update_objective" is added. This node utilizes the "UpdateObjective" tool to update the objective based on the user\'s specific request.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(start)-[:NEXT]->(fulfill_objective)"}),': The program starts by flowing from the Start Node to the "fulfill_objective" Program Node. This initiates the process of fulfilling the user\'s objective.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(fulfill_objective)-[:NEXT]->(ask_next_objective)"}),': After fulfilling the objective, the program moves to the "ask_next_objective" Action Node, prompting the user if they want anything else.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(ask_next_objective)-[:NEXT]->(is_assistance_needed)"}),': The flow then moves to the "is_assistance_needed" Decision Node, where the system checks if the user needs any further assistance.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(update_objective)-[:NEXT]->(fulfill_objective)"}),': If the user expresses a desire for something else, the program moves to the "update_objective" Action Node, allowing the user to specify their new request.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(is_assistance_needed)-[:YES]->(update_objective)"}),': If the user requires further assistance, the program loops back to the "update_objective" Action Node to handle the new request.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(is_assistance_needed)-[:NO]->(end)"}),": If the user doesn't need anything else, the program concludes by moving to the End Node."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This structure enables the program to handle various user objectives dynamically by calling specific programs as needed, enhancing adaptability and user interaction."}),"\n",(0,i.jsxs)(n.p,{children:["Now that we've outlined the structure for the main program in main.cypher, let's delve into implementing the ",(0,i.jsx)(n.code,{children:"fulfill_objective"})," program."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="fulfill_objective.cypher"',children:'// @desc: Fulfill the objective\nCREATE\n(start:Control {name:"Start"}),\n(end:Control {name:"End"}),\n(program_search:Action {\n    name:"Search for existing programs", \n    tool:"ProgramSearch",\n    prompt:"Describe in ONE short sentence what needs to be done.\n\nEnsure to use the following examples format to answer:\n- Search the answer to the given question on internet\n- Tell the answer to the User\n- Nagivate into the given folder using `cd`\n- Try to create the given folder\n- Clarify the objective\n\nEnsure to use the above format."}),\n(call_program:Program {\n    name:"Review the available programs from the search and select the most suitable one to fulfill the objective.",\n    program:"call_program"}),\n(is_objective_complete:Decision {\n    name:"Determine if the objective has been successfully fulfilled. If not, loop back to search for alternative programs.",\n    question:"Is the Objective complete?"}),\n(start)-[:NEXT]->(program_search),\n(program_search)-[:NEXT]->(call_program),\n(call_program)-[:NEXT]->(is_objective_complete),\n(is_objective_complete)-[:NO]->(program_search),\n(is_objective_complete)-[:YES]->(end)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here's how the ",(0,i.jsx)(n.code,{children:"fulfill_objective"})," program is structured:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(program_search:Action {...})"}),": This Action Node initiates the process by prompting the system to search for existing programs that could fulfill the objective. The user is prompted to describe the objective in a short sentence using specific formatting guidelines. This description will guide the program search."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(call_program:Program {...})"}),": Once the search is complete, this Program Node facilitates the review of available programs based on the search results. The system selects the most suitable program to fulfill the objective."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(is_objective_complete:Decision {...})"}),": After calling the selected program, this Decision Node evaluates whether the objective has been successfully fulfilled. If not, the system loops back to search for alternative programs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(start)-[:NEXT]->(program_search)"}),": The program starts by flowing from the Start Node to the ",(0,i.jsx)(n.code,{children:"program_search"})," Action Node."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(program_search)-[:NEXT]->(call_program)"}),": After searching for programs, the flow moves to the ",(0,i.jsx)(n.code,{children:"call_program"})," Program Node to review and select the most suitable program."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(call_program)-[:NEXT]->(is_objective_complete)"}),": Once the program is called, the flow moves to the ",(0,i.jsx)(n.code,{children:"is_objective_complete"})," Decision Node to determine if the objective has been fulfilled."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(is_objective_complete)-[:NO]->(program_search)"}),": If the objective is not complete, the program loops back to search for alternative programs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"(is_objective_complete)-[:YES]->(end)"}),": If the objective is complete, the program concludes by moving to the End Node."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This structure enables the ",(0,i.jsx)(n.code,{children:"fulfill_objective"})," program to efficiently search for and call appropriate programs to fulfill the user's objective, ensuring adaptability and efficiency in handling various tasks."]}),"\n",(0,i.jsxs)(n.p,{children:["The final piece of this project is the ",(0,i.jsx)(n.code,{children:"call_program"})," procedure that handle errors during the call of the program."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="call_program.cypher"',children:'// @desc: Try to call a existing program\nCREATE\n(start:Control {name:"Start"}),\n(end:Control {name:"End"}),\n(call_program:Action {\n    name:"Call an existing program to fullfil the Objective", \n    tool:"CallProgram",\n    prompt:"Please call the more appropriate program to fullfil the Objective.\nPlease, only use the program name and remove any parameter or file extension (the `.cypher`).\nRemember to always try to call an existing program."}),\n(is_successfully_called:Decision {\n    name:"Check if the program have been successfuly called",\n    question:"The program have been successfuly called?"}),\n(try_again:Action {\n    name:"Correct the program name and try again",\n    tool:"CallProgram",\n    prompt:"Please correct the program name.\nPlease, only use the program name and remove any parameter or file extension (the `.cypher`).\nRemember to always try to call an existing program."}),\n(start)-[:NEXT]->(call_program),\n(call_program)-[:NEXT]->(is_successfully_called),\n(try_again)-[:NEXT]->(is_successfully_called),\n(is_successfully_called)-[:NO]->(try_again),\n(is_successfully_called)-[:YES]->(end)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In addition to that, the ",(0,i.jsx)(n.a,{href:"https://github.com/SynaLinks/primitives-pack",children:"Primitives Pack"})," have been added to add basic functionnalities to the agent."]}),"\n",(0,i.jsxs)(n.p,{children:["You can find the complete implementation in the following ",(0,i.jsx)(n.a,{href:"https://github.com/SynaLinks/dynamic-call-agent",children:"repository"})]}),"\n",(0,i.jsx)(n.p,{children:"Do not hesitate to modify the prompt to fit your usecase and LLM."})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var i=t(7294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);