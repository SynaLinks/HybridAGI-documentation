"use strict";(self.webpackChunksynalinks_website=self.webpackChunksynalinks_website||[]).push([[696],{9772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=n(4848),s=n(8453);const o={},i="Custom retrievers",d={id:"api/retrievers/custom-retrievers",title:"Custom retrievers",description:"To build custom retrievers you need to create an object that inherit from the dspy.Retrieve Object.",source:"@site/docs/api/retrievers/custom-retrievers.md",sourceDirName:"api/retrievers",slug:"/api/retrievers/custom-retrievers",permalink:"/documentation/docs/api/retrievers/custom-retrievers",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Available Retrievers",permalink:"/documentation/docs/api/retrievers/available-retrievers"},next:{title:"Tools",permalink:"/documentation/docs/category/tools"}},a={},c=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"custom-retrievers",children:"Custom retrievers"}),"\n",(0,r.jsxs)(t.p,{children:["To build custom retrievers you need to create an object that inherit from the ",(0,r.jsx)(t.code,{children:"dspy.Retrieve"})," Object.\nFor that you only needs to implement the ",(0,r.jsx)(t.code,{children:"forward"})," method. Here is the code of the DocumentRetriever to help you understand how to implement your own:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import dspy\nfrom typing import Union, Optional, List\nfrom dsp.utils import dotdict\nfrom ..embeddings.base import BaseEmbeddings\nfrom ..hybridstores.filesystem.filesystem import FileSystem\n\nclass DocumentRetriever(dspy.Retrieve):\n    """Retrieve document chunks based on similarity"""\n\n    def __init__(\n            self,\n            filesystem: FileSystem,\n            embeddings: BaseEmbeddings,\n            distance_threshold: float = 1.2,\n            k: int = 3,\n        ):\n        """The retriever constructor"""\n        super().__init__(k = k)\n        self.filesystem = filesystem\n        self.embeddings = embeddings\n        self.distance_threshold = distance_threshold\n\n    def forward(\n            self,\n            query_or_queries: Union[str, List[str]],\n            k:Optional[int] = None,\n        ) -> dspy.Prediction:\n        """Method to perform DSPy forward prediction"""\n        if not isinstance(query_or_queries, list):\n            query_or_queries = [query_or_queries]\n        query_vectors = self.embeddings.embed_text(query_or_queries)\n        contents = []\n        indexes = {}\n        for vector in query_vectors:\n            # For an obscure reason falkordb needs a bigger k to find more indexed items\n            params = {"indexed_label": self.filesystem.indexed_label, "vector": list(vector), "k": 2*int(k or self.k)}\n            query = " ".join([\n                \'CALL db.idx.vector.queryNodes($indexed_label, "embeddings_vector", $k, vecf32($vector)) YIELD node, score\',\n                \'RETURN node.name AS name, score\'])\n            result = self.filesystem.hybridstore.query(\n                query,\n                params = params,\n            )\n            if len(result.result_set) > 0:\n                for record in result.result_set:\n                    if record[0] not in indexes:\n                        indexes[record[0]] = True\n                    else:\n                        continue\n                    content = self.filesystem.get_content(record[0])\n                    metadata = self.filesystem.get_content_metadata(record[0])\n                    distance = float(record[1])\n                    if distance < self.distance_threshold:\n                        contents.extend([{"passage": dotdict({"long_text": content, "metadata": metadata}), "distance": distance}])\n        sorted_passages = sorted(\n            contents,\n            key=lambda x: x["distance"],\n            reverse=False,\n        )[: k or self.k]\n        return dspy.Prediction(\n            passages=[el["passage"] for el in sorted_passages]\n        )\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);